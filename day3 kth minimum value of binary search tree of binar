#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new tree node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a value into the BST
struct TreeNode* insert(struct TreeNode* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

// Function to find the kth minimum value in the BST
void findKthMinimumUtil(struct TreeNode* root, int k, int* count, int* result) {
    if (root == NULL || *count >= k) {
        return;
    }
    findKthMinimumUtil(root->left, k, count, result);
    (*count)++;
    if (*count == k) {
        *result = root->data;
        return;
    }
    findKthMinimumUtil(root->right, k, count, result);
}

int findKthMinimum(struct TreeNode* root, int k) {
    int count = 0;
    int result = 0;
    findKthMinimumUtil(root, k, &count, &result);
    return result;
}

int main() {
    struct TreeNode* root = NULL;

    // Insert elements into the BST
    root = insert(root, 15);
    root = insert(root, 10);
    root = insert(root, 25);
    root = insert(root, 5);
    root = insert(root, 12);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 2);
    root = insert(root, 7);
    root = insert(root, 17);

    int k = 8;
    int kthMinimumValue = findKthMinimum(root, k);
    printf("The %dth minimum value is: %d\n", k, kthMinimumValue);

    return 0;
}
